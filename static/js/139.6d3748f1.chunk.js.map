{"version":3,"file":"static/js/139.6d3748f1.chunk.js","mappings":"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","sources":["webpack://fried-potato/./src/css/Users.module.css?6c6f","assets/Paginator.tsx","components/users/UsersSearch.tsx","components/users/Users.tsx","redux/users-selectors.js","components/users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Users_users__pD0fE\",\"usersBox\":\"Users_usersBox__u6ZjL\",\"friendsBox\":\"Users_friendsBox__uM8Kt\",\"user\":\"Users_user__8vmVS\",\"pageButton\":\"Users_pageButton__JB+Ml\",\"current\":\"Users_current__+0S4r\",\"prev\":\"Users_prev__WMuWl\",\"next\":\"Users_next__O-AGw\",\"paginatorScrollButton\":\"Users_paginatorScrollButton__+Qln9\",\"friends\":\"Users_friends__iwgrM\",\"formInput\":\"Users_formInput__KlWlX\",\"formBtn\":\"Users_formBtn__ceDfW\"};","import styles from '../css/Users.module.css'\r\nimport React, { useState } from 'react'\r\n\r\ntype PropsType = { overall: number; pageSize: number; portionSize: number; currentPage: number; setCurrentPageUsers: (b: number) => void }\r\n\r\nconst Paginator: React.FC<PropsType> = ({ overall, pageSize, portionSize, currentPage, setCurrentPageUsers }) => {\r\n      let items = Math.ceil(overall / pageSize)\r\n      let pages = []\r\n\r\n      for (let i = 1; i <= items; i++) {\r\n            pages.push(i)\r\n      }\r\n\r\n      const portions = Math.ceil(items / portionSize)\r\n      let [portionNumber, setPortionNumber] = useState(1)\r\n      let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n      let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n      return (\r\n            <div className={styles.paginator}>\r\n                  {portionNumber > 1 && (\r\n                        <button\r\n                              className={styles.paginatorScrollButton}\r\n                              id={styles.prev}\r\n                              onClick={() => {\r\n                                    setPortionNumber(portionNumber - 1)\r\n                              }}\r\n                        >\r\n                              {'<< PREV'}\r\n                        </button>\r\n                  )}\r\n\r\n                  {pages\r\n                        .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                        .map((b, id) => {\r\n                              return (\r\n                                    <button key={id} className={`${currentPage === b ? styles.current : ''} ${styles.pageButton}`} onClick={(e) => setCurrentPageUsers(b)}>\r\n                                          {b}\r\n                                    </button>\r\n                              )\r\n                        })}\r\n\r\n                  {portions > portionNumber && (\r\n                        <button\r\n                              className={styles.paginatorScrollButton}\r\n                              id={styles.next}\r\n                              onClick={() => {\r\n                                    setPortionNumber(portionNumber + 1)\r\n                              }}\r\n                        >\r\n                              {'NEXT >>'}\r\n                        </button>\r\n                  )}\r\n            </div>\r\n      )\r\n}\r\n\r\nexport default Paginator\r\n","import { Formik } from 'formik'\r\nimport styles from '../../css/Users.module.css'\r\n\r\ntype IProps = {\r\n      searchUsers: (term: string) => void\r\n}\r\n\r\nconst UsersSearch: React.FC<IProps> = (props) => {\r\n      return (\r\n            <Formik\r\n                  initialValues={{ name: '' }}\r\n                  onSubmit={(values, { setSubmitting }) => {\r\n                        props.searchUsers(values.name)\r\n                        setSubmitting(false)\r\n                  }}\r\n                  className={styles.formBlank}\r\n            >\r\n                  {({ values, handleChange, handleBlur, errors, handleSubmit, isSubmitting }) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                              <input type='text' name='name' onChange={handleChange} onBlur={handleBlur} value={values.name} className={styles.formInput} />\r\n                              {errors.name}\r\n                              <button type='submit' disabled={isSubmitting} className={styles.formBtn}>\r\n                                    Submit\r\n                              </button>\r\n                        </form>\r\n                  )}\r\n            </Formik>\r\n      )\r\n}\r\n\r\nexport default UsersSearch\r\n","import styles from '../../css/Users.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Paginator from '../../assets/Paginator'\r\nimport { FC, useState } from 'react'\r\nimport { UserType } from '../../types'\r\nimport UsersSearch from './UsersSearch'\r\n\r\ntype IProps = {\r\n      overall: number\r\n      pageSize: number\r\n      portionSize?: number\r\n      currentPage: number\r\n      usersList: Array<UserType>\r\n      friendsList: Array<UserType>\r\n      inProgress: Array<number>\r\n      follow: (id: number) => void\r\n      unfollow: (id: number) => void\r\n      setCurrentPageUsers: (b: number) => void\r\n      searchUsers: (term: string) => void\r\n}\r\n\r\nconst Users: FC<IProps> = (props) => {\r\n      let [toggle, setToggle] = useState(true)\r\n      return (\r\n            <section className={styles.users}>\r\n                  <Paginator overall={props.overall} pageSize={props.pageSize} currentPage={props.currentPage} setCurrentPageUsers={props.setCurrentPageUsers} portionSize={3} />\r\n                  <button className={styles.friends} onClick={() => setToggle(!toggle)}>\r\n                        Friends\r\n                  </button>\r\n                  <UsersSearch searchUsers={props.searchUsers} />\r\n\r\n                  <ul className={styles.usersBox}>\r\n                        {props.usersList.map((u) => (\r\n                              <li className={styles.user} key={u.id}>\r\n                                    <NavLink to={'/profile/' + u.id}>\r\n                                          <img src='https://icones.pro/wp-content/uploads/2021/04/icone-sourire-violet.png' alt='MyProfile' />\r\n                                    </NavLink>\r\n                                    <p>{u.name}</p>\r\n                                    {u.followed ? (\r\n                                          <button onClick={() => props.unfollow(u.id)} disabled={props.inProgress.some((i) => i === u.id)}>\r\n                                                Unfollow\r\n                                          </button>\r\n                                    ) : (\r\n                                          <button onClick={() => props.follow(u.id)} disabled={props.inProgress.some((i) => i === u.id)}>\r\n                                                Follow\r\n                                          </button>\r\n                                    )}\r\n                              </li>\r\n                        ))}\r\n                  </ul>\r\n                  {toggle || (\r\n                        <ul className={styles.friendsBox}>\r\n                              {props.friendsList.map((u) => (\r\n                                    <li className={styles.user} key={u.id}>\r\n                                          <NavLink to={'/profile/' + u.id}>\r\n                                                <img src={u.photos?.small || 'https://icones.pro/wp-content/uploads/2021/04/icone-sourire-violet.png'} alt='MyProfile' />\r\n                                          </NavLink>\r\n                                          <p>{u.name}</p>\r\n                                          {u.followed ? (\r\n                                                <button onClick={() => props.unfollow(u.id)} disabled={props.inProgress.some((i) => i === u.id)}>\r\n                                                      Unfollow\r\n                                                </button>\r\n                                          ) : (\r\n                                                <button onClick={() => props.follow(u.id)} disabled={props.inProgress.some((i) => i === u.id)}>\r\n                                                      Follow\r\n                                                </button>\r\n                                          )}\r\n                                    </li>\r\n                              ))}\r\n                        </ul>\r\n                  )}\r\n            </section>\r\n      )\r\n}\r\n\r\nexport default Users\r\n","import { createSelector } from 'reselect'\r\nimport { InitialStateUsersType } from './users-reducer'\r\n\r\nexport const getUsersList = (state) => {\r\n      return state.users.usersList\r\n}\r\nexport const getOverall = (state) => {\r\n      return state.users.overall\r\n}\r\nexport const getPageSize = (state) => {\r\n      return state.users.pageSize\r\n}\r\nexport const getCurrentPage = (state) => {\r\n      return state.users.currentPage\r\n}\r\nexport const getIsFetching = (state) => {\r\n      return state.users.isFetching\r\n}\r\nexport const getInProgress = (state) => {\r\n      return state.users.inProgress\r\n}\r\n\r\nexport const getUsersListSelector = createSelector(getUsersList, (users) => {\r\n      return users.filter((user) => user)\r\n}) // * Complicated selector that uses primitive selector as a parameter\r\n","import { connect } from 'react-redux'\r\nimport { Component } from 'react'\r\nimport Users from './Users'\r\nimport Loader from '../../assets/Loader'\r\nimport { follow, getUsersThunk, UsersActions, unfollow, getFriendsThunk, searchUsersThunk } from '../../redux/users-reducer'\r\nimport { withRouter } from '../../hoc/withRouter'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { getCurrentPage, getInProgress, getIsFetching, getOverall, getPageSize, getUsersListSelector } from '../../redux/users-selectors'\r\nimport { UserType } from '../../types'\r\nimport { rootStateType } from '../../redux/store'\r\n\r\ntype IState = {\r\n      usersList: Array<UserType>\r\n      friendsList: Array<UserType>\r\n      overall: number\r\n      pageSize: number\r\n      currentPage: number\r\n      isFetching: boolean\r\n      inProgress: Array<number>\r\n}\r\ntype IDispatch = {\r\n      getUsersThunk: (currentPage: number, pageSize: number) => void\r\n      getFriendsThunk: () => void\r\n      searchUsersThunk: (term: string) => void\r\n      setCurrentPage: (p: number) => void\r\n      follow: (id: number) => void\r\n      unfollow: (id: number) => void\r\n}\r\ntype OwnPropsType = {}\r\ntype IProps = IState & IDispatch & OwnPropsType\r\n\r\nclass UsersContainer extends Component<IProps> {\r\n      componentDidMount() {\r\n            this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\r\n            this.props.getFriendsThunk()\r\n      }\r\n\r\n      setCurrentPageUsers = (p: number) => {\r\n            this.props.setCurrentPage(p)\r\n            this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\r\n      }\r\n\r\n      render() {\r\n            return (\r\n                  <>\r\n                        <Loader isFetching={this.props.isFetching} />\r\n                        <Users overall={this.props.overall} pageSize={this.props.pageSize} currentPage={this.props.currentPage} usersList={this.props.usersList} setCurrentPageUsers={this.setCurrentPageUsers} follow={this.props.follow} unfollow={this.props.unfollow} inProgress={this.props.inProgress} friendsList={this.props.friendsList} searchUsers={this.props.searchUsersThunk}/>\r\n                  </>\r\n            )\r\n      }\r\n}\r\n\r\nconst mapStateToProps = (state: rootStateType): IState => {\r\n      return {\r\n            usersList: getUsersListSelector(state),\r\n            friendsList: state.users.friendsList,\r\n            overall: getOverall(state),\r\n            pageSize: getPageSize(state),\r\n            currentPage: getCurrentPage(state),\r\n            isFetching: getIsFetching(state),\r\n            inProgress: getInProgress(state),\r\n      }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n      connect<IState, IDispatch, OwnPropsType, rootStateType>(mapStateToProps, {\r\n            follow,\r\n            unfollow,\r\n            setCurrentPage: (thisPageNumber) => UsersActions.setCurrentPage(thisPageNumber),\r\n            getUsersThunk,\r\n            getFriendsThunk,\r\n            searchUsersThunk,\r\n      }),\r\n      withRouter,\r\n      withAuthRedirect\r\n)(UsersContainer)\r\n"],"names":["_ref","overall","pageSize","portionSize","currentPage","setCurrentPageUsers","items","Math","ceil","pages","i","push","portions","portionNumber","setPortionNumber","useState","leftPortionPageNumber","rightPortionPageNumber","_jsxs","className","styles","paginator","children","_jsx","paginatorScrollButton","id","prev","onClick","filter","p","map","b","current","pageButton","e","next","props","Formik","initialValues","name","onSubmit","values","setSubmitting","searchUsers","formBlank","_ref2","handleChange","handleBlur","errors","handleSubmit","isSubmitting","type","onChange","onBlur","value","formInput","disabled","formBtn","toggle","setToggle","users","Paginator","friends","UsersSearch","usersBox","usersList","u","user","NavLink","to","src","alt","followed","unfollow","inProgress","some","follow","friendsBox","friendsList","_u$photos","photos","small","getOverall","state","getPageSize","getCurrentPage","getIsFetching","isFetching","getInProgress","getUsersListSelector","createSelector","UsersContainer","Component","constructor","arguments","this","setCurrentPage","getUsersThunk","componentDidMount","getFriendsThunk","render","_Fragment","Loader","Users","searchUsersThunk","compose","connect","thisPageNumber","UsersActions","withRouter","withAuthRedirect"],"sourceRoot":""}