{"version":3,"file":"static/js/938.7e429129.chunk.js","mappings":"kLACA,QAA8B,8BAA9B,EAAsE,0BAAtE,EAA4G,4BAA5G,EAAoJ,4BAApJ,EAA2O,6B,mDCM3O,MAAMA,EAAyD,CACzD,CAAC,iBAAkB,qBAAqB,GACxC,CAAC,4BAA6B,eAC9B,CAAC,WAAY,aACb,CAAC,UAAW,YACZ,CAAC,SAAU,UACX,CAAC,YAAa,aACd,CAAC,UAAW,YA8BlB,GAAeC,EAAAA,EAAAA,GAAwB,CAAEC,KAAM,iBAA/C,EAhBiEC,IAErDC,EAAAA,EAAAA,MAAA,QAAMC,SAAUF,EAAMG,aAAcC,UAAWC,EAAiBC,SAAA,EAC1DC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACHT,EAAYW,KAAI,CAACC,EAAOC,KAEbH,EAAAA,EAAAA,KAAA,SAAgBH,UAAWC,EAAkBC,UACtCK,EAAAA,EAAAA,GAA4BF,EAAM,GAAIA,EAAM,GAAI,CAACG,EAAAA,IAAWH,EAAM,KAD7DC,MAKxBH,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,KAAK,UAAUC,SAAS,SAAQT,SAAC,gB,gCCjB3D,MA8CA,GAAeU,E,QAAAA,IAAQC,EAAAA,EAAvB,EA9CqBC,KACf,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IACzBC,GAAsBC,EAAAA,EAAAA,MAqB5B,OACM3B,EAAAA,EAAAA,MAAA,MAAIG,UAAY,GAAEC,YAA6BC,SAAA,EACzCL,EAAAA,EAAAA,MAAA,KAAGG,UAAWyB,IAAWxB,EAAgB,CAAE,CAACA,GAAmBc,IAAWb,SAAA,EACpEC,EAAAA,EAAAA,KAAA,QAAMuB,QAASA,IAAMV,GAAW,GAAOd,SAAC,MAAQ,gCAErDgB,IAAUG,GACLxB,EAAAA,EAAAA,MAAA8B,EAAAA,SAAA,CAAAzB,SAAA,EACMC,EAAAA,EAAAA,KAAA,MAAAD,UACMC,EAAAA,EAAAA,KAAA,SAAOyB,SA5BhBC,IACXA,EAAEC,OAAOC,QACPR,GAASS,EAAAA,EAAAA,IAAUH,EAAEC,OAAOC,MAAM,KAClCf,GAAW,GACjB,EAwBsDN,KAAK,OAAOuB,YAAY,4BAE5D9B,EAAAA,EAAAA,KAAA,MAAAD,UACMC,EAAAA,EAAAA,KAAC+B,EAAiB,CAACpC,SAzBzBqC,IAClB,MAAMC,EAAO,CACPC,QAASF,EAASE,QAClBC,SAAU,CACJC,UAAWJ,EAASI,UACpBC,QAASL,EAASK,QAClBC,OAAQN,EAASM,QAEvBC,SAAUP,EAASO,SACnBC,eAAgBR,EAASQ,eACzBC,0BAA2BT,EAASS,2BAE1CrB,GAASsB,EAAAA,EAAAA,IAAYT,GAAM,SAiBf,yDAEP,G","sources":["webpack://fried-potato/./src/css/Settings.module.css?3a6a","components/settings/SettingsForm.tsx","components/settings/Settings.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"settingsBox\":\"Settings_settingsBox__iKpgv\",\"warning\":\"Settings_warning__bnW7P\",\"trueError\":\"Settings_trueError__Goa85\",\"fieldForm\":\"Settings_fieldForm__Rtq1-\",\"inputTextBox\":\"Settings_inputTextBox__nzL5t\",\"fieldLabel\":\"Settings_fieldLabel__cTpvZ\"};","import { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport styles from '../../css/Settings.module.css'\r\nimport createField from '../../assets/createField'\r\nimport { required } from '../../assets/Validators'\r\nimport { Button } from 'antd'\r\nimport React from 'react'\r\n\r\nconst inputFields: Array<[FormKeysValues, string, boolean?]> = [\r\n      ['lookingForAJob', 'Looking for a job', true],\r\n      ['lookingForAJobDescription', 'Description'],\r\n      ['fullName', 'Full name'],\r\n      ['aboutMe', 'About me'],\r\n      ['github', 'GitHub'],\r\n      ['instagram', 'Instagram'],\r\n      ['twitter', 'Twitter'],\r\n]\r\n\r\ntype FormKeysType = {\r\n      lookingForAJob: boolean\r\n      lookingForAJobDescription: string\r\n      fullName: string\r\n      aboutMe: string\r\n      github: string\r\n      instagram: string\r\n      twitter: string\r\n}\r\ntype FormKeysValues = Extract<keyof FormKeysType, string>\r\n\r\nconst SettingsForm: React.FC<InjectedFormProps<FormKeysType>> = (props) => {\r\n      return (\r\n            <form onSubmit={props.handleSubmit} className={styles.fieldForm}>\r\n                  <h3>Profile Settings</h3>\r\n                  {inputFields.map((input, id) => {\r\n                        return (\r\n                              <label key={id} className={styles.fieldLabel}>\r\n                                    {createField<FormKeysValues>(input[0], input[1], [required], input[2])}\r\n                              </label>\r\n                        )\r\n                  })}\r\n                  <Button type='primary' htmlType='submit'>Submit</Button>\r\n            </form>\r\n      )\r\n}\r\n\r\nexport default reduxForm<FormKeysType>({ form: 'settings_data' })(SettingsForm)\r\n","import { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savePhoto, saveProfile } from '../../redux/profile-reducer'\r\nimport { ChangeEvent, FC, useState } from 'react'\r\nimport styles from '../../css/Settings.module.css'\r\nimport SettingsFormRedux from './SettingsForm'\r\nimport classNames from 'classnames'\r\nimport { IDispatch } from '../../redux/store'\r\nimport { PhotosType } from '../../types'\r\nimport { getId, getProfileId } from '../../selectors'\r\nimport { compose } from 'redux'\r\n\r\ntype IProps = {}\r\ntype FormKeysType = {\r\n      lookingForAJob: boolean\r\n      lookingForAJobDescription: string\r\n      fullName: string\r\n      aboutMe: string\r\n      github: string\r\n      instagram: string\r\n      twitter: string\r\n}\r\nconst Settings: FC = () => {\r\n      const [warning, setWarning] = useState(false)\r\n      const ownId = useSelector(getId)\r\n      const uploadedId = useSelector(getProfileId)\r\n      const dispatch: IDispatch = useDispatch()\r\n      const uploadPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n            if (e.target.files) {\r\n                  dispatch(savePhoto(e.target.files[0] as unknown as PhotosType))\r\n                  setWarning(true)\r\n            }\r\n      }\r\n      const formDataSubmit = (formData: FormKeysType) => {\r\n            const data = {\r\n                  aboutMe: formData.aboutMe,\r\n                  contacts: {\r\n                        instagram: formData.instagram,\r\n                        twitter: formData.twitter,\r\n                        github: formData.github,\r\n                  },\r\n                  fullName: formData.fullName,\r\n                  lookingForAJob: formData.lookingForAJob,\r\n                  lookingForAJobDescription: formData.lookingForAJobDescription,\r\n            }\r\n            dispatch(saveProfile(data))\r\n      }\r\n      return (\r\n            <ul className={`${styles.settingsBox} section`}>\r\n                  <p className={classNames(styles.warning, { [styles.trueError]: warning })}>\r\n                        <span onClick={() => setWarning(false)}>X</span>Picture has been replaced!\r\n                  </p>\r\n                  {ownId === uploadedId ? (\r\n                        <>\r\n                              <li>\r\n                                    <input onChange={uploadPhoto} type='file' placeholder='Change profile photo' />\r\n                              </li>\r\n                              <li>\r\n                                    <SettingsFormRedux onSubmit={formDataSubmit} />\r\n                              </li>\r\n                        </>\r\n                  ) : (\r\n                        'Switch to your account (Go to profile and come back)'\r\n                  )}\r\n            </ul>\r\n      )\r\n}\r\n\r\nexport default compose(withAuthRedirect)(Settings)\r\n"],"names":["inputFields","reduxForm","form","props","_jsxs","onSubmit","handleSubmit","className","styles","children","_jsx","map","input","id","createField","required","Button","type","htmlType","compose","withAuthRedirect","Settings","warning","setWarning","useState","ownId","useSelector","getId","uploadedId","getProfileId","dispatch","useDispatch","classNames","onClick","_Fragment","onChange","e","target","files","savePhoto","placeholder","SettingsFormRedux","formData","data","aboutMe","contacts","instagram","twitter","github","fullName","lookingForAJob","lookingForAJobDescription","saveProfile"],"sourceRoot":""}