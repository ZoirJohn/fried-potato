{"version":3,"file":"static/js/56.e8dd691d.chunk.js","mappings":"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","sources":["webpack://fried-potato/./src/css/Settings.module.css?3a6a","assets/createField.tsx","components/settings/SettingsForm.tsx","components/settings/Settings.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"settingsBox\":\"Settings_settingsBox__iKpgv\",\"warning\":\"Settings_warning__bnW7P\",\"warn\":\"Settings_warn__fZR1m\",\"hideWarn\":\"Settings_hideWarn__pWMc0\",\"fieldForm\":\"Settings_fieldForm__Rtq1-\",\"fieldLabel\":\"Settings_fieldLabel__cTpvZ\"};","import { Field } from 'redux-form'\r\nimport { Input, InputCheckbox } from './Input'\r\nimport { Validator, ValidatorOfLength } from './Validators'\r\n\r\nfunction createField<FormKeysValues extends string>(name: FormKeysValues, placeholder: string, validators: Array<Validator | ValidatorOfLength>, type: any) {\r\n      return <Field name={name} component={type ? InputCheckbox : Input} placeholder={placeholder} validate={type ? [] : validators} />\r\n}\r\n\r\nexport default createField\r\n","import { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport styles from '../../css/Settings.module.css'\r\nimport createField from '../../assets/createField'\r\nimport { required } from '../../assets/Validators'\r\nimport React from 'react'\r\n\r\nconst inputFields: Array<[FormKeysValues, string, boolean?]> = [\r\n      ['lookingForAJob', 'Looking for a job', true],\r\n      ['lookingForAJobDescription', 'Description'],\r\n      ['fullName', 'Full name'],\r\n      ['aboutMe', 'About me'],\r\n      ['github', 'GitHub'],\r\n      ['instagram', 'Instagram'],\r\n      ['twitter', 'Twitter'],\r\n]\r\n\r\ntype FormKeysType = {\r\n      lookingForAJob: string\r\n      lookingForAJobDescription: string\r\n      fullName: string\r\n      aboutMe: string\r\n      github: string\r\n      instagram: string\r\n      twitter: string\r\n}\r\ntype FormKeysValues = Extract<keyof FormKeysType, string>\r\n\r\nconst SettingsForm: React.FC<InjectedFormProps<FormKeysType>> = (props) => {\r\n      return (\r\n            <form onSubmit={props.handleSubmit} className={styles.fieldForm}>\r\n                  <h3>Profile Settings</h3>\r\n                  {inputFields.map((input, id) => {\r\n                        return (\r\n                              <label key={id} className={styles.fieldLabel}>\r\n                                    {createField<FormKeysValues>(input[0], input[1], [required], input[2])}\r\n                              </label>\r\n                        )\r\n                  })}\r\n                  <button type='submit'>Submit</button>\r\n            </form>\r\n      )\r\n}\r\n\r\nexport default reduxForm<FormKeysType>({ form: 'settings_data' })(SettingsForm)\r\n","import { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { savePhoto, saveProfile } from '../../redux/profile-reducer'\r\nimport { Component, ComponentType } from 'react'\r\nimport styles from '../../css/Settings.module.css'\r\nimport SettingsFormRedux from './SettingsForm'\r\nimport classNames from 'classnames'\r\nimport { rootStateType } from '../../redux/store'\r\n\r\ntype MapStateToProps = {\r\n      ownId: number | null\r\n      uploadedId: number|undefined\r\n      payload: any\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n      savePhoto: (file: any) => void\r\n      saveProfile: (formValues: any) => void\r\n}\r\ntype OwnState = {\r\n      warning: boolean\r\n      hideWarning: boolean\r\n      form: boolean\r\n}\r\ntype PropsType = MapStateToProps & MapDispatchToProps\r\n\r\ntype FormKeysType = {\r\n      lookingForAJob: string\r\n      lookingForAJobDescription: string\r\n      fullName: string\r\n      aboutMe: string\r\n      github: string\r\n      instagram: string\r\n      twitter: string\r\n}\r\n\r\nclass Settings extends Component<PropsType, OwnState> {\r\n      constructor(props: PropsType) {\r\n            super(props)\r\n            this.state = {\r\n                  warning: false as boolean,\r\n                  hideWarning: false as boolean,\r\n                  form: false as boolean,\r\n            }\r\n            this.setWarning = this.setWarning.bind(this)\r\n            this.setHideWarning = this.setHideWarning.bind(this)\r\n      }\r\n      setWarning = () => {\r\n            this.setState((prevState: OwnState) => ({ warning: !prevState.warning }))\r\n      }\r\n      setHideWarning = () => {\r\n            this.setState((prevState: OwnState) => ({ hideWarning: !prevState.hideWarning }))\r\n      }\r\n      componentDidUpdate() {\r\n            if (!this.state.warning) {\r\n                  this.setWarning()\r\n            }\r\n      }\r\n      render() {\r\n            const uploadPhoto = (e: any) => {\r\n                  this.props.savePhoto(e.target.files[0])\r\n            }\r\n            const formDataSubmit = (formData: FormKeysType) => {\r\n                  this.props.saveProfile({ ...formData, contacts: { twitter: formData.twitter, instagram: formData.instagram, github: formData.github } })\r\n            }\r\n            return (\r\n                  <ul className={styles.settingsBox}>\r\n                        <p className={classNames(styles.warning, { [styles.warn]: this.state.warning, [styles.hideWarn]: this.state.hideWarning })}>\r\n                              <span onClick={this.setHideWarning}>X</span>Picture has been replaced!\r\n                        </p>\r\n                        {this.props.ownId === this.props.uploadedId ? (\r\n                              <>\r\n                                    <li>\r\n                                          <input onChange={uploadPhoto} type='file' placeholder='Change profile photo' />\r\n                                    </li>\r\n                                    <li>\r\n                                          <SettingsFormRedux {...this.props} onSubmit={formDataSubmit} />\r\n                                    </li>\r\n                              </>\r\n                        ) : (\r\n                              'Switch to your account (Go to profile and come back)'\r\n                        )}\r\n                  </ul>\r\n            )\r\n      }\r\n}\r\nconst mapStateToProps = (state: rootStateType): MapStateToProps => {\r\n      return {\r\n            ownId: state.auth.id,\r\n            uploadedId: state.profile.profileUser?.userId,\r\n            payload: state.profile.profileUser?.photos,\r\n      }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, { savePhoto, saveProfile }), withAuthRedirect)(Settings)\r\n"],"names":["name","placeholder","validators","type","_jsx","Field","component","InputCheckbox","Input","validate","inputFields","reduxForm","form","props","_jsxs","onSubmit","handleSubmit","className","styles","children","map","input","id","createField","required","Settings","Component","constructor","super","setWarning","this","setState","prevState","warning","setHideWarning","hideWarning","state","bind","componentDidUpdate","render","classNames","onClick","ownId","uploadedId","_Fragment","onChange","e","savePhoto","target","files","SettingsFormRedux","formData","saveProfile","contacts","twitter","instagram","github","compose","connect","_state$profile$profil","_state$profile$profil2","auth","profile","profileUser","userId","payload","photos","withAuthRedirect"],"sourceRoot":""}