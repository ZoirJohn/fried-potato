{"version":3,"file":"static/js/139.89e22ed8.chunk.js","mappings":"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","sources":["webpack://fried-potato/./src/css/Users.module.css?6c6f","assets/Paginator.tsx","components/users/UsersSearch.tsx","components/users/Users.tsx","redux/users-selectors.js","components/users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Users_users__pD0fE\",\"usersBox\":\"Users_usersBox__u6ZjL\",\"friendsBox\":\"Users_friendsBox__uM8Kt\",\"user\":\"Users_user__8vmVS\",\"pageButton\":\"Users_pageButton__JB+Ml\",\"current\":\"Users_current__+0S4r\",\"prev\":\"Users_prev__WMuWl\",\"next\":\"Users_next__O-AGw\",\"paginatorScrollButton\":\"Users_paginatorScrollButton__+Qln9\",\"friends\":\"Users_friends__iwgrM\",\"formInput\":\"Users_formInput__KlWlX\",\"formBtn\":\"Users_formBtn__ceDfW\"};","import styles from '../css/Users.module.css'\r\nimport React, { useState } from 'react'\r\n\r\ntype PropsType = { overall: number; pageSize: number; portionSize: number; currentPage: number; setCurrentPageUsers: (b: number) => void }\r\n\r\nconst Paginator: React.FC<PropsType> = ({ overall, pageSize, portionSize, currentPage, setCurrentPageUsers }) => {\r\n      let items = Math.ceil(overall / pageSize)\r\n      let pages = []\r\n\r\n      for (let i = 1; i <= items; i++) {\r\n            pages.push(i)\r\n      }\r\n\r\n      const portions = Math.ceil(items / portionSize)\r\n      let [portionNumber, setPortionNumber] = useState(1)\r\n      let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n      let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n      return (\r\n            <div className={styles.paginator}>\r\n                  {portionNumber > 1 && (\r\n                        <button\r\n                              className={styles.paginatorScrollButton}\r\n                              id={styles.prev}\r\n                              onClick={() => {\r\n                                    setPortionNumber(portionNumber - 1)\r\n                              }}\r\n                        >\r\n                              {'<< PREV'}\r\n                        </button>\r\n                  )}\r\n\r\n                  {pages\r\n                        .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                        .map((b, id) => {\r\n                              return (\r\n                                    <button key={id} className={`${currentPage === b ? styles.current : ''} ${styles.pageButton}`} onClick={(e) => setCurrentPageUsers(b)}>\r\n                                          {b}\r\n                                    </button>\r\n                              )\r\n                        })}\r\n\r\n                  {portions > portionNumber && (\r\n                        <button\r\n                              className={styles.paginatorScrollButton}\r\n                              id={styles.next}\r\n                              onClick={() => {\r\n                                    setPortionNumber(portionNumber + 1)\r\n                              }}\r\n                        >\r\n                              {'NEXT >>'}\r\n                        </button>\r\n                  )}\r\n            </div>\r\n      )\r\n}\r\n\r\nexport default Paginator\r\n","import React, { FC, memo } from 'react'\r\nimport { Field, Formik } from 'formik'\r\nimport styles from '../../css/Users.module.css'\r\n\r\ntype IProps = {\r\n      filter: {\r\n            term: string\r\n            onlyFriends: boolean | null\r\n      }\r\n      setFilterSearch: (term: string, onlyFriends: null | boolean) => void\r\n}\r\n\r\nconst UsersSearch: FC<IProps> = memo((props) => {\r\n      return (\r\n            <Formik\r\n                  initialValues={{ name: '', onlyFriends: '' }}\r\n                  onSubmit={(values, { setSubmitting }) => {\r\n                        if (values.onlyFriends === 'true') {\r\n                              props.setFilterSearch(values.name, true)\r\n                        } else if (values.onlyFriends === 'false') {\r\n                              props.setFilterSearch(values.name, false)\r\n                        } else {\r\n                              props.setFilterSearch(values.name, null)\r\n                        }\r\n                        setSubmitting(false)\r\n                  }}\r\n                  className={styles.formBlank}\r\n            >\r\n                  {({ values, handleChange, handleBlur, errors, handleSubmit, isSubmitting }) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                              <Field type='text' name='name' onChange={handleChange} onBlur={handleBlur} value={values.name} className={styles.formInput} />\r\n                              <button type='submit' disabled={isSubmitting} className={styles.formBtn}>\r\n                                    Search\r\n                              </button>\r\n                              <Field name='onlyFriends' as='select'>\r\n                                    <option value='null'>All</option>\r\n                                    <option value='true'>Only followed</option>\r\n                                    <option value='false'>Only unfollowed</option>\r\n                              </Field>\r\n                        </form>\r\n                  )}\r\n            </Formik>\r\n      )\r\n})\r\n\r\nexport default UsersSearch\r\n","import styles from '../../css/Users.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Paginator from '../../assets/Paginator'\r\nimport { FC, useState } from 'react'\r\nimport { UserType } from '../../types'\r\nimport UsersSearch from './UsersSearch'\r\n\r\ntype IProps = {\r\n      overall: number\r\n      pageSize: number\r\n      portionSize?: number\r\n      currentPage: number\r\n      usersList: Array<UserType>\r\n      inProgress: Array<number>\r\n      filter: {\r\n            term: string\r\n            onlyFriends: boolean | null\r\n      }\r\n      follow: (id: number) => void\r\n      unfollow: (id: number) => void\r\n      setCurrentPageUsers: (b: number) => void\r\n      setFilterSearch: (term: string, onlyFriends: null | boolean) => void\r\n}\r\n\r\nconst Users: FC<IProps> = (props) => {\r\n      return (\r\n            <section className={styles.users}>\r\n                  <Paginator overall={props.overall} pageSize={props.pageSize} currentPage={props.currentPage} setCurrentPageUsers={props.setCurrentPageUsers} portionSize={3} />\r\n                  <UsersSearch setFilterSearch={props.setFilterSearch} filter={props.filter} />\r\n\r\n                  <ul className={styles.usersBox}>\r\n                        {props.usersList.map((u) => (\r\n                              <li className={styles.user} key={u.id}>\r\n                                    <NavLink to={'/profile/' + u.id}>\r\n                                          <img src='https://icones.pro/wp-content/uploads/2021/04/icone-sourire-violet.png' alt='MyProfile' />\r\n                                    </NavLink>\r\n                                    <p>{u.name}</p>\r\n                                    {u.followed ? (\r\n                                          <button onClick={() => props.unfollow(u.id)} disabled={props.inProgress.some((i) => i === u.id)}>\r\n                                                Unfollow\r\n                                          </button>\r\n                                    ) : (\r\n                                          <button onClick={() => props.follow(u.id)} disabled={props.inProgress.some((i) => i === u.id)}>\r\n                                                Follow\r\n                                          </button>\r\n                                    )}\r\n                              </li>\r\n                        ))}\r\n                  </ul>\r\n            </section>\r\n      )\r\n}\r\n\r\nexport default Users\r\n","import { createSelector } from 'reselect'\r\nimport { InitialStateUsersType } from './users-reducer'\r\n\r\nexport const getUsersList = (state) => {\r\n      return state.users.usersList\r\n}\r\nexport const getOverall = (state) => {\r\n      return state.users.overall\r\n}\r\nexport const getPageSize = (state) => {\r\n      return state.users.pageSize\r\n}\r\nexport const getCurrentPage = (state) => {\r\n      return state.users.currentPage\r\n}\r\nexport const getIsFetching = (state) => {\r\n      return state.users.isFetching\r\n}\r\nexport const getInProgress = (state) => {\r\n      return state.users.inProgress\r\n}\r\nexport const getFilter = (state) => {\r\n      return state.users.filter\r\n}\r\nexport const getUsersListSelector = createSelector(getUsersList, (users) => {\r\n      return users.filter((user) => user)\r\n}) // * Complicated selector that uses primitive selector as a parameter\r\n","import { connect } from 'react-redux'\r\nimport { Component } from 'react'\r\nimport Users from './Users'\r\nimport Loader from '../../assets/Loader'\r\nimport { follow, getUsersThunk, UsersActions, unfollow } from '../../redux/users-reducer'\r\nimport { withRouter } from '../../hoc/withRouter'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { getCurrentPage, getFilter, getInProgress, getIsFetching, getOverall, getPageSize, getUsersListSelector } from '../../redux/users-selectors'\r\nimport { UserType } from '../../types'\r\nimport { rootStateType } from '../../redux/store'\r\n\r\ntype IState = {\r\n      usersList: Array<UserType>\r\n      overall: number\r\n      pageSize: number\r\n      currentPage: number\r\n      isFetching: boolean\r\n      inProgress: Array<number>\r\n      filter: {\r\n            term: string\r\n            onlyFriends: boolean | null\r\n      }\r\n}\r\ntype IDispatch = {\r\n      getUsersThunk: (currentPage: number, pageSize: number, term: string, onlyFriends: boolean | null, searched?: boolean) => void\r\n      setCurrentPage: (p: number) => void\r\n      follow: (id: number) => void\r\n      unfollow: (id: number) => void\r\n}\r\ntype OwnPropsType = {}\r\ntype IProps = IState & IDispatch & OwnPropsType\r\n\r\nclass UsersContainer extends Component<IProps> {\r\n      componentDidMount() {\r\n            this.props.getUsersThunk(this.props.currentPage, this.props.pageSize, this.props.filter.term, this.props.filter.onlyFriends)\r\n      }\r\n      setCurrentPageUsers = (p: number) => {\r\n            this.props.getUsersThunk(p, this.props.pageSize, this.props.filter.term, this.props.filter.onlyFriends)\r\n      }\r\n      setFilterSearch = (term: string, onlyFriends: boolean | null) => {\r\n            this.props.getUsersThunk(1, this.props.pageSize, term, onlyFriends, true)\r\n      }\r\n      render() {\r\n            return (\r\n                  <>\r\n                        <Loader isFetching={this.props.isFetching} />\r\n                        <Users\r\n                              overall={this.props.overall}\r\n                              pageSize={this.props.pageSize}\r\n                              currentPage={this.props.currentPage}\r\n                              usersList={this.props.usersList}\r\n                              setCurrentPageUsers={this.setCurrentPageUsers}\r\n                              follow={this.props.follow}\r\n                              unfollow={this.props.unfollow}\r\n                              inProgress={this.props.inProgress}\r\n                              setFilterSearch={this.setFilterSearch}\r\n                              filter={this.props.filter}\r\n                        />\r\n                  </>\r\n            )\r\n      }\r\n}\r\n\r\nconst mapStateToProps = (state: rootStateType): IState => {\r\n      return {\r\n            usersList: getUsersListSelector(state),\r\n            overall: getOverall(state),\r\n            pageSize: getPageSize(state),\r\n            currentPage: getCurrentPage(state),\r\n            isFetching: getIsFetching(state),\r\n            inProgress: getInProgress(state),\r\n            filter: getFilter(state),\r\n      }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n      connect<IState, IDispatch, OwnPropsType, rootStateType>(mapStateToProps, {\r\n            follow,\r\n            unfollow,\r\n            getUsersThunk,\r\n            setCurrentPage: UsersActions.setCurrentPage,\r\n      }),\r\n      withRouter,\r\n      withAuthRedirect\r\n)(UsersContainer)\r\n"],"names":["_ref","overall","pageSize","portionSize","currentPage","setCurrentPageUsers","items","Math","ceil","pages","i","push","portions","portionNumber","setPortionNumber","useState","leftPortionPageNumber","rightPortionPageNumber","_jsxs","className","styles","paginator","children","_jsx","paginatorScrollButton","id","prev","onClick","filter","p","map","b","current","pageButton","e","next","memo","props","Formik","initialValues","name","onlyFriends","onSubmit","values","setSubmitting","setFilterSearch","formBlank","_ref2","handleChange","handleBlur","errors","handleSubmit","isSubmitting","Field","type","onChange","onBlur","value","formInput","disabled","formBtn","as","users","Paginator","UsersSearch","usersBox","usersList","u","user","NavLink","to","src","alt","followed","unfollow","inProgress","some","follow","getOverall","state","getPageSize","getCurrentPage","getIsFetching","isFetching","getInProgress","getFilter","getUsersListSelector","createSelector","UsersContainer","Component","constructor","arguments","this","getUsersThunk","term","componentDidMount","render","_Fragment","Loader","Users","compose","connect","setCurrentPage","UsersActions","withRouter","withAuthRedirect"],"sourceRoot":""}