{"version":3,"file":"static/js/176.5af33d01.chunk.js","mappings":"uJACA,QAA0B,yBAA1B,EAA8D,0BAA9D,EAAsG,6BAAtG,EAA6I,yBAA7I,EAAoL,6BAApL,EAA6N,2B,qDCK7MA,EAAAA,EAAAA,IAAU,KACVC,EAAAA,EAAAA,IAAU,GAD1B,MAsBA,EAjBoCC,IAC9B,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAC3BC,GAAsBC,EAAAA,EAAAA,MAM5B,OACMC,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACMC,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAOC,SAAWC,GAAMT,EAAQS,EAAEC,cAAcC,OAAQA,MAAOZ,KAC3EO,EAAAA,EAAAA,KAAA,UAAQM,QAAUH,GARNA,KAClBA,EAAEI,iBACFX,GAASY,EAAAA,EAAAA,IAAYf,IACrBC,EAAQ,GAAG,EAKmBe,CAAeN,GAAIF,KAAK,SAASS,SAAUlB,EAAMmB,UAAUZ,SAAC,WAGnF,E,wBCVnB,MAsCA,GAAea,EAAAA,EAAAA,IAtCoBpB,IAAW,IAADqB,EACvC,MAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAASF,EAAAA,EAAAA,IAAYG,EAAAA,IACrBC,GAASJ,EAAAA,EAAAA,IAAYK,EAAAA,IACrBxB,GAAsBC,EAAAA,EAAAA,MACtBwB,GAAkBC,EAAAA,EAAAA,QAAsB,MAY9C,OAXuB,QAAvBT,EAAAQ,EAAgBE,eAAO,IAAAV,GAAvBA,EAAyBW,eAAe,CAAEC,SAAU,YAEpDC,EAAAA,EAAAA,YAAU,KACJ9B,GAAS+B,EAAAA,EAAAA,OAIF,KACD/B,GAASgC,EAAAA,EAAAA,MAAgB,IAElC,KAEG9B,EAAAA,EAAAA,MAAA,WAAS+B,UAAY,GAAEC,YAAyB/B,SAAA,EAC1CD,EAAAA,EAAAA,MAAA,MAAI+B,UAAWC,EAAgB/B,SAAA,CACxBe,EAASiB,KAAI,CAACC,EAASC,KAClBnC,EAAAA,EAAAA,MAAA,MAAa+B,UAAY,GAAEC,KAAsBE,EAAQb,SAAWA,EAASW,EAAmB,KAAK/B,SAAA,EAC/FC,EAAAA,EAAAA,KAAA,OAAK6B,UAAWC,EAAe/B,UACzBC,EAAAA,EAAAA,KAAA,OAAKkC,IAAKF,EAAQG,OAASC,EAAcC,IAAI,oBAEnDvC,EAAAA,EAAAA,MAAA,OAAK+B,UAAWC,EAAmB/B,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,KAAAD,SAAIiC,EAAQA,WACZhC,EAAAA,EAAAA,KAAA,MAAAD,SAAKiC,EAAQM,gBANhBL,MAUfjC,EAAAA,EAAAA,KAAA,MAAIuC,IAAKlB,QAEfrB,EAAAA,EAAAA,KAACwC,EAAc,CAAC7B,UAAsB,UAAXM,MACvB,G","sources":["webpack://fried-potato/./src/css/Dialogs.module.css?a678","components/dialogs/DialogsForm.tsx","components/dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__sGVYO\",\"messages\":\"Dialogs_messages__SG76E\",\"profileData\":\"Dialogs_profileData__4sg-t\",\"contact\":\"Dialogs_contact__QXMsT\",\"messageText\":\"Dialogs_messageText__cCX8G\",\"myMessage\":\"Dialogs_myMessage__qY6ag\"};","import { maxLength, minLength, required } from '../../assets/Validators'\r\nimport { MouseEvent, FC, useState } from 'react'\r\nimport { IDispatch } from '../../redux/store'\r\nimport { useDispatch } from 'react-redux'\r\nimport { sendMessage } from '../../redux/dialogs-reducer'\r\n\r\nconst maximum = maxLength(30)\r\nconst minimum = minLength(2)\r\ntype TProps = {\r\n      disabling: boolean\r\n}\r\nconst AddMessageForm: FC<TProps> = (props) => {\r\n      const [text, setText] = useState('')\r\n      const dispatch: IDispatch = useDispatch()\r\n      const setTextHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n            e.preventDefault()\r\n            dispatch(sendMessage(text))\r\n            setText('')\r\n      }\r\n      return (\r\n            <form>\r\n                  <input type='text' onChange={(e) => setText(e.currentTarget.value)} value={text} />\r\n                  <button onClick={(e) => setTextHandler(e)} type='submit' disabled={props.disabling}>\r\n                        Send\r\n                  </button>\r\n            </form>\r\n      )\r\n}\r\nexport default AddMessageForm\r\n","import { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport styles from '../../css/Dialogs.module.css'\r\nimport AddMessageForm from './DialogsForm'\r\nimport React, { useEffect, useRef } from 'react'\r\nimport profilePhoto from '../../img/profile-user.webp'\r\nimport { IDispatch } from '../../redux/store'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getId, getMessages, getSubStatus } from '../../selectors'\r\nimport { startMessaging, stopMessaging } from '../../redux/dialogs-reducer'\r\n\r\ntype TProps = {}\r\nexport type IFormKeys = {\r\n      AddMessageForm: string\r\n}\r\n\r\nconst Dialogs: React.FC<TProps> = (props) => {\r\n      const messages = useSelector(getMessages)\r\n      const status = useSelector(getSubStatus)\r\n      const userId = useSelector(getId)\r\n      const dispatch: IDispatch = useDispatch()\r\n      const anchorScrollObj = useRef<HTMLLIElement>(null)\r\n      anchorScrollObj.current?.scrollIntoView({ behavior: 'smooth' })\r\n\r\n      useEffect(() => {\r\n            dispatch(startMessaging())\r\n            if (messages) {\r\n            }\r\n\r\n            return () => {\r\n                  dispatch(stopMessaging())\r\n            }\r\n      }, [])\r\n      return (\r\n            <section className={`${styles.dialogs} section`}>\r\n                  <ul className={styles.messages}>\r\n                        {messages.map((message, id) => (\r\n                              <li key={id} className={`${styles.profileData} ${message.userId === userId ? styles.myMessage : ''}`}>\r\n                                    <div className={styles.contact}>\r\n                                          <img src={message.photo || profilePhoto} alt='profilePhoto' />\r\n                                    </div>\r\n                                    <div className={styles.messageText}>\r\n                                          <p>{message.message}</p>\r\n                                          <h3>{message.userName}</h3>\r\n                                    </div>\r\n                              </li>\r\n                        ))}\r\n                        <li ref={anchorScrollObj}></li>\r\n                  </ul>\r\n                  <AddMessageForm disabling={status !== 'ready'} />\r\n            </section>\r\n      )\r\n}\r\n\r\nexport default withAuthRedirect(Dialogs)\r\n"],"names":["maxLength","minLength","props","text","setText","useState","dispatch","useDispatch","_jsxs","children","_jsx","type","onChange","e","currentTarget","value","onClick","preventDefault","sendMessage","setTextHandler","disabled","disabling","withAuthRedirect","_anchorScrollObj$curr","messages","useSelector","getMessages","status","getSubStatus","userId","getId","anchorScrollObj","useRef","current","scrollIntoView","behavior","useEffect","startMessaging","stopMessaging","className","styles","map","message","id","src","photo","profilePhoto","alt","userName","ref","AddMessageForm"],"sourceRoot":""}