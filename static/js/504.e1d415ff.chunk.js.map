{"version":3,"file":"static/js/504.e1d415ff.chunk.js","mappings":"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","sources":["webpack://fried-potato/./src/css/Users.module.css?6c6f","components/users/UsersSearch.tsx","components/users/Users.tsx","components/users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Users_users__pD0fE\",\"searchForm\":\"Users_searchForm__EJ8CE\",\"searchFormInput\":\"Users_searchFormInput__k7JXX\"};","import { FC, memo } from 'react'\r\nimport { Field, Formik } from 'formik'\r\nimport styles from '../../css/Users.module.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { getFilter } from '../../selectors'\r\nimport { SearchOutlined } from '@ant-design/icons'\r\nimport { Tooltip, Button, Input } from 'antd'\r\n\r\nconst { Search } = Input\r\ntype IProps = {\r\n      setFilterSearch: (term: string, onlyFriends: null | boolean) => void\r\n}\r\n\r\nconst UsersSearch: FC<IProps> = memo((props) => {\r\n      const filter = useSelector(getFilter)\r\n      return (\r\n            <Formik\r\n                  enableReinitialize\r\n                  initialValues={{ name: filter.term, onlyFriends: String(filter.onlyFriends) }}\r\n                  onSubmit={(values, { setSubmitting }) => {\r\n                        if (values.onlyFriends === 'true') {\r\n                              props.setFilterSearch(values.name, true)\r\n                        } else if (values.onlyFriends === 'false') {\r\n                              props.setFilterSearch(values.name, false)\r\n                        } else {\r\n                              props.setFilterSearch(values.name, null)\r\n                        }\r\n                        setSubmitting(false)\r\n                  }}\r\n            >\r\n                  {({ values, handleChange, handleBlur, errors, handleSubmit, isSubmitting }) => (\r\n                        <form className={styles.searchForm} onSubmit={handleSubmit}>\r\n                              <Field type='text' name='name' onChange={handleChange} onBlur={handleBlur} value={values.name} className={styles.searchFormInput} />\r\n                              <Tooltip title='search'>\r\n                                    <Button type='primary' shape='circle' icon={<SearchOutlined />} htmlType='submit' disabled={isSubmitting} />\r\n                              </Tooltip>\r\n                              <Field name='onlyFriends' as='select'>\r\n                                    <option value='null'>All</option>\r\n                                    <option value='true'>Only followed</option>\r\n                                    <option value='false'>Only unfollowed</option>\r\n                              </Field>\r\n                        </form>\r\n                  )}\r\n            </Formik>\r\n      )\r\n})\r\n\r\nexport default UsersSearch\r\n","import { NavLink, useLocation, useNavigate, useSearchParams } from 'react-router-dom'\r\nimport { FC, useEffect, useState } from 'react'\r\nimport { UserType } from '../../types'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCurrentPage, getFilter, getInProgress, getOverall, getPageSize, getUsersList } from '../../selectors'\r\nimport { getUsersThunk } from '../../redux/users-reducer'\r\nimport { IDispatch } from '../../redux/store'\r\nimport { follow, unfollow } from '../../redux/users-reducer'\r\nimport styles from '../../css/Users.module.css'\r\nimport UsersSearch from './UsersSearch'\r\nimport { NumberParam, StringParam, useQueryParam } from 'use-query-params'\r\nimport { Col, Pagination, Row } from 'antd'\r\nimport { Button, Card, Flex, Typography } from 'antd'\r\n\r\ntype IProps = {}\r\n\r\nconst cardStyle: React.CSSProperties = {\r\n      width: '100%',\r\n}\r\n\r\nconst imgStyle: React.CSSProperties = {\r\n      display: 'block',\r\n      width: 73,\r\n}\r\n\r\nconst Users: FC<IProps> = (props) => {\r\n      const users = useSelector(getUsersList)\r\n      const overall = useSelector(getOverall)\r\n      const pageSize = useSelector(getPageSize)\r\n      const currentPage = useSelector(getCurrentPage)\r\n      const filter = useSelector(getFilter)\r\n      const inProgress = useSelector(getInProgress)\r\n      const dispatch: IDispatch = useDispatch()\r\n      const navigate = useNavigate()\r\n      const [term, setTerm] = useQueryParam('term', StringParam)\r\n      const [friend, setFriend] = useQueryParam('friend', StringParam)\r\n      const [page, setPage] = useQueryParam('friend', NumberParam)\r\n      useEffect(() => {\r\n            const parsedObject = {\r\n                  term: term,\r\n                  onlyFriends: friend,\r\n                  page: page,\r\n            }\r\n            let actualPage = currentPage\r\n            let actualFilter = filter\r\n            if (!!parsedObject.page) {\r\n                  actualPage = Number(parsedObject.page)\r\n            }\r\n            if (!!parsedObject.term) {\r\n                  actualFilter = { ...actualFilter, term: parsedObject.term }\r\n            }\r\n            switch (parsedObject.onlyFriends) {\r\n                  case 'true':\r\n                        actualFilter = { ...actualFilter, onlyFriends: true }\r\n                        break\r\n                  case 'false':\r\n                        actualFilter = { ...actualFilter, onlyFriends: false }\r\n                        break\r\n                  case 'null':\r\n                        actualFilter = { ...actualFilter, onlyFriends: null }\r\n                        break\r\n            }\r\n            dispatch(getUsersThunk(actualPage, pageSize, actualFilter.term, actualFilter.onlyFriends))\r\n      }, [])\r\n      useEffect(() => {\r\n            navigate(`/users?term=${filter.term}&friend=${filter.onlyFriends}&page=${currentPage}`)\r\n      }, [filter, currentPage])\r\n      const setCurrentPageUsers = (page: number) => {\r\n            dispatch(getUsersThunk(page, pageSize, filter.term, filter.onlyFriends))\r\n      }\r\n      const setFilterSearch = (term: string, onlyFriends: boolean | null) => {\r\n            dispatch(getUsersThunk(1, pageSize, term, onlyFriends, true))\r\n      }\r\n      const followUser = (userId: number) => {\r\n            dispatch(follow(userId))\r\n      }\r\n      const unfollowUser = (userId: number) => {\r\n            dispatch(unfollow(userId))\r\n      }\r\n\r\n      return (\r\n            <Row className={`${styles.users} section`}>\r\n                  <Col span={12}>\r\n                        <Pagination defaultCurrent={1} total={overall} current={currentPage} onChange={setCurrentPageUsers} />\r\n                  </Col>\r\n                  <Col span={12}>\r\n                        <UsersSearch setFilterSearch={setFilterSearch} />\r\n                  </Col>\r\n                  <Col span={24} style={{ padding: '1em 0' }}>\r\n                        <Row justify={'space-between'}>\r\n                              {users.map((u: UserType, id) => (\r\n                                    <Col span={4} key={id}>\r\n                                          <Card hoverable style={cardStyle} styles={{ body: { padding: 0, overflow: 'hidden' } }}>\r\n                                                <Flex justify='center' align='center' vertical gap={'1.5em'} style={{ padding: '2em' }}>\r\n                                                      <NavLink to={'/profile/' + u.id}>\r\n                                                            <img src={u.photos?.small || `https://icones.pro/wp-content/uploads/2021/04/icone-sourire-violet.png`} alt='MyProfile' style={imgStyle} />\r\n                                                      </NavLink>\r\n\r\n                                                      <Flex vertical align='center' justify='center'>\r\n                                                            <Typography.Title level={5}>{u.name}</Typography.Title>\r\n                                                            {u.followed ? (\r\n                                                                  <Button onClick={() => unfollowUser(u.id)} disabled={inProgress.some((i: number) => i === u.id)} type='primary'>\r\n                                                                        Unfollow\r\n                                                                  </Button>\r\n                                                            ) : (\r\n                                                                  <Button onClick={() => followUser(u.id)} disabled={inProgress.some((i: number) => i === u.id)} type='primary'>\r\n                                                                        Follow\r\n                                                                  </Button>\r\n                                                            )}\r\n                                                      </Flex>\r\n                                                </Flex>\r\n                                          </Card>\r\n                                    </Col>\r\n                              ))}\r\n                        </Row>\r\n                  </Col>\r\n            </Row>\r\n      )\r\n}\r\n\r\nexport default Users\r\n","import { useSelector } from 'react-redux'\r\nimport { ComponentType, FC } from 'react'\r\nimport { getIsFetching } from '../../selectors'\r\nimport Users from './Users'\r\nimport Loader from '../../assets/Loader'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\n\r\ntype IProps = {}\r\n\r\nconst UsersContainer: FC<IProps> = () => {\r\n      const isFetching = useSelector(getIsFetching)\r\n      return (\r\n            <>\r\n                  <Loader isFetching={isFetching} />\r\n                  <Users />\r\n            </>\r\n      )\r\n}\r\n\r\nexport default compose(withAuthRedirect)(UsersContainer)\r\n"],"names":["Search","Input","memo","props","filter","useSelector","getFilter","_jsx","Formik","enableReinitialize","initialValues","name","term","onlyFriends","String","onSubmit","values","_ref","setSubmitting","setFilterSearch","children","_ref2","handleChange","handleBlur","errors","handleSubmit","isSubmitting","_jsxs","className","styles","Field","type","onChange","onBlur","value","Tooltip","title","Button","shape","icon","SearchOutlined","htmlType","disabled","as","cardStyle","width","imgStyle","display","users","getUsersList","overall","getOverall","pageSize","getPageSize","currentPage","getCurrentPage","inProgress","getInProgress","dispatch","useDispatch","navigate","useNavigate","setTerm","useQueryParam","StringParam","friend","setFriend","page","setPage","NumberParam","useEffect","parsedObject","actualPage","actualFilter","Number","getUsersThunk","Row","Col","span","Pagination","defaultCurrent","total","current","UsersSearch","style","padding","justify","map","u","id","_u$photos","Card","hoverable","body","overflow","Flex","align","vertical","gap","NavLink","to","src","photos","small","alt","Typography","Title","level","followed","onClick","unfollowUser","userId","unfollow","some","i","followUser","follow","compose","withAuthRedirect","UsersContainer","isFetching","getIsFetching","_Fragment","Loader","Users"],"sourceRoot":""}