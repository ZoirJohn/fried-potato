{"version":3,"file":"static/js/808.35b79467.chunk.js","mappings":"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","sources":["webpack://fried-potato/./src/css/Users.module.css?6c6f","assets/Paginator.tsx","components/users/UsersSearch.tsx","components/users/Users.tsx","components/users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Users_users__pD0fE\",\"usersBox\":\"Users_usersBox__u6ZjL\",\"friendsBox\":\"Users_friendsBox__uM8Kt\",\"user\":\"Users_user__8vmVS\",\"pageButton\":\"Users_pageButton__JB+Ml\",\"current\":\"Users_current__+0S4r\",\"prev\":\"Users_prev__WMuWl\",\"next\":\"Users_next__O-AGw\",\"paginatorScrollButton\":\"Users_paginatorScrollButton__+Qln9\",\"friends\":\"Users_friends__iwgrM\",\"searchForm\":\"Users_searchForm__EJ8CE\",\"searchFormInput\":\"Users_searchFormInput__k7JXX\",\"searchFormBtn\":\"Users_searchFormBtn__xiHnw\"};","import styles from '../css/Users.module.css'\r\nimport React, { useState } from 'react'\r\n\r\ntype PropsType = { overall: number; pageSize: number; portionSize: number; currentPage: number; setCurrentPageUsers: (b: number) => void }\r\n\r\nconst Paginator: React.FC<PropsType> = ({ overall, pageSize, portionSize, currentPage, setCurrentPageUsers }) => {\r\n      let items = Math.ceil(overall / pageSize) // 50 / 10=5\r\n      let pages = []\r\n\r\n      for (let i = 1; i <= items; i++) {//\r\n            pages.push(i)\r\n      }\r\n\r\n      const portions = Math.ceil(items / portionSize)\r\n      let [portionNumber, setPortionNumber] = useState(1)\r\n      let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n      let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n      return (\r\n            <div className={styles.paginator}>\r\n                  {portionNumber > 1 && (\r\n                        <button\r\n                              className={styles.paginatorScrollButton}\r\n                              id={styles.prev}\r\n                              onClick={() => {\r\n                                    setPortionNumber(portionNumber - 1)\r\n                              }}\r\n                        >\r\n                              {'<< PREV'}\r\n                        </button>\r\n                  )}\r\n\r\n                  {pages\r\n                        .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                        .map((b, id) => {\r\n                              return (\r\n                                    <button key={id} className={`${currentPage === b ? styles.current : ''} ${styles.pageButton}`} onClick={(e) => setCurrentPageUsers(b)}>\r\n                                          {b}\r\n                                    </button>\r\n                              )\r\n                        })}\r\n\r\n                  {portions > portionNumber && (\r\n                        <button\r\n                              className={styles.paginatorScrollButton}\r\n                              id={styles.next}\r\n                              onClick={() => {\r\n                                    setPortionNumber(portionNumber + 1)\r\n                              }}\r\n                        >\r\n                              {'NEXT >>'}\r\n                        </button>\r\n                  )}\r\n            </div>\r\n      )\r\n}\r\n\r\nexport default Paginator\r\n","import { FC, memo } from 'react'\r\nimport { Field, Formik } from 'formik'\r\nimport styles from '../../css/Users.module.css'\r\ntype IProps = {\r\n      filter: {\r\n            term: string\r\n            onlyFriends: boolean | null\r\n      }\r\n      setFilterSearch: (term: string, onlyFriends: null | boolean) => void\r\n}\r\n\r\nconst UsersSearch: FC<IProps> = memo((props) => {\r\n      return (\r\n            <Formik\r\n                  initialValues={{ name: '', onlyFriends: '' }}\r\n                  onSubmit={(values, { setSubmitting }) => {\r\n                        if (values.onlyFriends === 'true') {\r\n                              props.setFilterSearch(values.name, true)\r\n                        } else if (values.onlyFriends === 'false') {\r\n                              props.setFilterSearch(values.name, false)\r\n                        } else {\r\n                              props.setFilterSearch(values.name, null)\r\n                        }\r\n                        setSubmitting(false)\r\n                  }}\r\n                  className={styles.formBlank}\r\n            >\r\n                  {({ values, handleChange, handleBlur, errors, handleSubmit, isSubmitting }) => (\r\n                        <form className={styles.searchForm} onSubmit={handleSubmit}>\r\n                              <Field type='text' name='name' onChange={handleChange} onBlur={handleBlur} value={values.name} className={styles.searchFormInput} />\r\n                              <button type='submit' disabled={isSubmitting} className={styles.searchFormBtn}>\r\n                                    Search\r\n                              </button>\r\n                              <Field name='onlyFriends' as='select'>\r\n                                    <option value='null'>All</option>\r\n                                    <option value='true'>Only followed</option>\r\n                                    <option value='false'>Only unfollowed</option>\r\n                              </Field>\r\n                        </form>\r\n                  )}\r\n            </Formik>\r\n      )\r\n})\r\n\r\nexport default UsersSearch\r\n","import { NavLink } from 'react-router-dom'\r\nimport { FC, useEffect } from 'react'\r\nimport { UserType } from '../../types'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCurrentPage, getFilter, getInProgress, getOverall, getPageSize, getUsersList } from '../../selectors'\r\nimport { getUsersThunk } from '../../redux/users-reducer'\r\nimport { IDispatch } from '../../redux/store'\r\nimport { follow, unfollow } from '../../redux/users-reducer'\r\nimport styles from '../../css/Users.module.css'\r\nimport Paginator from '../../assets/Paginator'\r\nimport UsersSearch from './UsersSearch'\r\n\r\ntype IProps = {}\r\n\r\nconst Users: FC<IProps> = (props) => {\r\n      const users = useSelector(getUsersList)\r\n      const overall = useSelector(getOverall)\r\n      const pageSize = useSelector(getPageSize)\r\n      const currentPage = useSelector(getCurrentPage)\r\n      const filter = useSelector(getFilter)\r\n      const inProgress = useSelector(getInProgress)\r\n      const dispatch: IDispatch = useDispatch()\r\n\r\n      useEffect(() => {\r\n            dispatch(getUsersThunk(currentPage, pageSize, filter.term, filter.onlyFriends))\r\n      }, [])\r\n      const setCurrentPageUsers = (page: number) => {\r\n            dispatch(getUsersThunk(page, pageSize, filter.term, filter.onlyFriends))\r\n      }\r\n      const setFilterSearch = (term: string, onlyFriends: boolean | null) => {\r\n            dispatch(getUsersThunk(1, pageSize, term, onlyFriends, true))\r\n      }\r\n      const followUser = (userId: number) => {\r\n            dispatch(follow(userId))\r\n      }\r\n      const unfollowUser = (userId: number) => {\r\n            dispatch(unfollow(userId))\r\n      }\r\n      return (\r\n            <section className={styles.users}>\r\n                  <Paginator overall={overall} pageSize={pageSize} currentPage={currentPage} setCurrentPageUsers={setCurrentPageUsers} portionSize={3} />\r\n                  <UsersSearch setFilterSearch={setFilterSearch} filter={filter} />\r\n\r\n                  <ul className={styles.usersBox}>\r\n                        {users.map((u: UserType) => (\r\n                              <li className={styles.user} key={u.id}>\r\n                                    <NavLink to={'/profile/' + u.id}>\r\n                                          <img src={u.photos?.small || `https://icones.pro/wp-content/uploads/2021/04/icone-sourire-violet.png`} alt='MyProfile' />\r\n                                    </NavLink>\r\n                                    <p>{u.name}</p>\r\n                                    {u.followed ? (\r\n                                          <button onClick={() => unfollowUser(u.id)} disabled={inProgress.some((i: number) => i === u.id)}>\r\n                                                Unfollow\r\n                                          </button>\r\n                                    ) : (\r\n                                          <button onClick={() => followUser(u.id)} disabled={inProgress.some((i: number) => i === u.id)}>\r\n                                                Follow\r\n                                          </button>\r\n                                    )}\r\n                              </li>\r\n                        ))}\r\n                  </ul>\r\n            </section>\r\n      )\r\n}\r\n\r\nexport default Users\r\n","import { useSelector } from 'react-redux'\r\nimport { FC } from 'react'\r\nimport { getIsFetching } from '../../selectors'\r\nimport Users from './Users'\r\nimport Loader from '../../assets/Loader'\r\n\r\ntype IProps = {}\r\n\r\nconst UsersContainer: FC<IProps> = () => {\r\n      const isFetching = useSelector(getIsFetching)\r\n      return (\r\n            <>\r\n                  <Loader isFetching={isFetching} />\r\n                  <Users />\r\n            </>\r\n      )\r\n}\r\n\r\nexport default UsersContainer\r\n"],"names":["_ref","overall","pageSize","portionSize","currentPage","setCurrentPageUsers","items","Math","ceil","pages","i","push","portions","portionNumber","setPortionNumber","useState","leftPortionPageNumber","rightPortionPageNumber","_jsxs","className","styles","paginator","children","_jsx","paginatorScrollButton","id","prev","onClick","filter","p","map","b","current","pageButton","e","next","memo","props","Formik","initialValues","name","onlyFriends","onSubmit","values","setSubmitting","setFilterSearch","formBlank","_ref2","handleChange","handleBlur","errors","handleSubmit","isSubmitting","searchForm","Field","type","onChange","onBlur","value","searchFormInput","disabled","searchFormBtn","as","users","useSelector","getUsersList","getOverall","getPageSize","getCurrentPage","getFilter","inProgress","getInProgress","dispatch","useDispatch","useEffect","getUsersThunk","term","Paginator","page","UsersSearch","usersBox","u","_u$photos","user","NavLink","to","src","photos","small","alt","followed","unfollowUser","userId","unfollow","some","followUser","follow","UsersContainer","isFetching","getIsFetching","_Fragment","Loader","Users"],"sourceRoot":""}